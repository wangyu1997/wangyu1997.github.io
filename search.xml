<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[LDA Algorithm]]></title>
      <url>/2017/05/26/LDA/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><h3 id="线性判别分析LDA原理总结"><a href="#线性判别分析LDA原理总结" class="headerlink" title="线性判别分析LDA原理总结"></a><center>线性判别分析LDA原理总结</center></h3><p>　　　　线性判别分析（Linear Discriminant Analysis, 以下简称LDA）,一种经典的降维方法。LDA在模式识别领域（比如人脸识别，舰艇识别等图形图像识别领域）中有非常广泛的应用，因此我们有必要了解下它的算法原理。</p>
<p>　　　　在学习LDA之前，有必要将其自然语言处理领域的LDA区别开来，在自然语言处理领域， LDA是隐含狄利克雷分布（Latent Dirichlet Allocation，简称LDA），他是一种处理文档的主题模型。我们本文只讨论线性判别分析，因此后面所有的LDA均指线性判别分析。</p>
<ol>
<li>LDA的思想</li>
</ol>
<p>　　　　LDA是一种监督学习的降维技术，也就是说它的数据集的每个样本是有类别输出的。这点和PCA不同。PCA是不考虑样本类别输出的无监督降维技术。LDA的思想可以用一句话概括，就是“投影后类内方差最小，类间方差最大”。什么意思呢？ 我们要将数据在低维度上进行投影，投影后希望每一种类别数据的投影点尽可能的接近，而不同类别的数据的类别中心之间的距离尽可能的大。</p>
<center><br><img src="http://oq5d32gij.bkt.clouddn.com/14958087329231.jpg" alt=""><br></center>

<p>　　　　可能还是有点抽象，我们先看看最简单的情况。假设我们有两类数据 分别为红色和蓝色，如下图所示，这些数据特征是二维的，我们希望将这些数据投影到一维的一条直线，让每一种类别数据的投影点尽可能的接近，而红色和蓝色数据中心之间的距离尽可能的大。</p>
<p>　　　　上图中国提供了两种投影方式，哪一种能更好的满足我们的标准呢？从直观上可以看出，右图要比左图的投影效果好，因为右图的黑色数据和蓝色数据各个较为集中，且类别之间的距离明显。左图则在边界处数据混杂。以上就是LDA的主要思想了，当然在实际应用中，我们的数据是多个类别的，我们的原始数据一般也是超过二维的，投影后的也一般不是直线，而是一个低维的超平面。</p>
<p>　　　　在我们将上面直观的内容转化为可以度量的问题之前，我们先了解些必要的数学基础知识，这些在后面讲解具体LDA原理时会用到。</p>
<ol>
<li>瑞利商（Rayleigh quotient）与广义瑞利商（genralized Rayleigh quotient）<br>   我们首先来看看瑞利商的定义。瑞利商是指这样的函数$R(A,x)$:<br>$$R(A,x)=\frac{x^HAx}{x^Hx}$$<br>　　　　其中x为非零向量，而A为n×n的Hermitan矩阵。所谓的Hermitan矩阵就是满足共轭转置矩阵和自己相等的矩阵，即$A^H=A$。如果我们的矩阵A是实矩阵，则满足$A^H=A$的矩阵即为Hermitan矩阵。</li>
</ol>
<p>　　　　瑞利商$R(A,x)$有一个非常重要的性质，即它的最大值等于矩阵A最大的特征值，而最小值等于矩阵A的最小的特征值，也就是满足<br>$$\lambda_{min}≤\frac{x^HAx}{x^Hx}≤\lambda_{max}$$<br>　　　　具体的证明这里就不给出了。当向量x是标准正交基时，即满足$x^Hx=1$时，瑞利商退化为：$R(A,x)=x^HAx$，这个形式在谱聚类和PCA中都有出现。</p>
<p>　　　　以上就是瑞利商的内容，现在我们再看看广义瑞利商。广义瑞利商是指这样的函数$R(A,B,x)$:<br>$$R(A,x)=\frac{x^HAx}{x^HBx}$$<br>　　　　其中x为非零向量，而A,B为n×n的Hermitan矩阵。B为正定矩阵。它的最大值和最小值是什么呢？其实我们只要通过将其通过标准化就可以转化为瑞利商的格式。我们令$x′=B^{−1/2}x$,则分母转化为：<br>$$x^HBx=x′^H(B^{−1/2})^HBB^{−1/2}x′=x′^HB^{−1/2}BB^{−1/2}x′=x′^Hx′$$<br>　　　　而分子转化为：<br>$$x^HAx=x′^HB^{−1/2}AB^{−1/2}x′$$<br>　　　　此时我们的$R(A,B,x)$转化为$R(A,B,x′)$:<br>$$R(A,B,x′)=\frac{x′^HB^{−1/2}AB^{−1/2}x′}{x′^Hx′}$$<br>　　　　利用前面的瑞利商的性质，我们可以很快的知道，$R(A,B,x)$的最大值为矩阵$B^{−1/2}AB^{−1/2}$的最大特征值，或者说矩阵$B^{−1}A$的最大特征值，而最小值为矩阵$B^{−1}A$的最小特征值。这里使用了一个的技巧，即对矩阵进行标准化。</p>
<ol>
<li>二类LDA原理</li>
</ol>
<p>　　　　现在我们回到LDA的原理上，我们在第一节说讲到了LDA希望投影后希望同一种类别数据的投影点尽可能的接近，而不同类别的数据的类别中心之间的距离尽可能的大，但是这只是一个感官的度量。现在我们首先从比较简单的二类LDA入手，严谨的分析LDA的原理。</p>
<p>　　　　假设我们的数据集$D={(x_1,y_1),(x_2,y_2),\cdots,((x_m,y_m))}$,其中任意样本$x_i$为n维向量，$y_i\in{0,1}$。我们定义$N_j(j=0,1)$为第j类样本的个数，$X_j(j=0,1)$为第j类样本的集合，而$μ_j(j=0,1)$为第j类样本的均值向量，定义$Σ_j(j=0,1)$为第j类样本的协方差矩阵。</p>
<p>　　　　$μ_j$的表达式为：<br>$$μ_j=\frac{1}{Nj}\sum_{x\in{X_j}}x(j=0,1)$$<br>　　　　$∑_j$的表达式为：<br>$$∑_j=\sum_{x\in{Xj}}(x−μ_j)(x−μ_j)^T(j=0,1)$$<br>　　　　由于是两类数据，因此我们只需要将数据投影到一条直线上即可。假设我们的投影直线是向量w,则对任意一个样本本$x_i$,它在直线w的投影为$w^Tx_i$,对于我们的两个类别的中心点$μ_0,μ_1$,在在直线w的投影为$w^Tμ_0$和$w^Tμ_1$。由于LDA需要让不同类别的数据的类别中心之间的距离尽可能的大，也就是我们要最大化$||w^Tμ_0−w^Tμ_1||^2_2$,同时我们希望同一种类别数据的投影点尽可能的接近，也就是要同类样本投影点的协方差$w^T\sum_0w$和$w^T\sum_1w$尽可能的小，即最小化$w^T\sum_0w+w^T\sum_1w$。综上所述，我们的优化目标为：<br>$$\underbrace{arg\ max}_w\ J(w)=\frac{||w^Tμ_0−w^Tμ_1||^2_2}{w^T\sum_0w+w^T\sum_1w}=\frac{w^T(μ_0−μ_1)(μ_0−μ_1)^Tw}{w^T(\sum_0+\sum_1)w}$$<br>　　　　我们一般定义类内散度矩阵$S_w$为：<br>$$S_w=∑_0+∑_1=\sum_{x\in{X0}}(x−μ0)(x−μ0)^T+\sum_{x\in{X1}}(x−μ1)(x−μ1)^T$$<br>　　　　同时定义类间散度矩阵$S_b$为：<br>$$S_b=(μ_0−μ_1)(μ_0−μ_1)^T$$<br>　　　　这样我们的优化目标重写为：<br>$$\underbrace{arg\ max}_w\ J(w)=\frac{w^TS_bw}{w^TS_ww}$$<br>　　　　仔细一看上式，这不就是我们的广义瑞利商嘛！这就简单了，利用我们第二节讲到的广义瑞利商的性质，我们知道我们的$J(w)$最大值为矩阵$S^{−1}_wS_b$的最大特征值，而对应的$w$为$S^{−1}_wS_b$的最大特征值对应的特征向量!</p>
<p>　　　　注意到对于二类的时候，$S_bw$的方向恒为$μ_0−μ_1$,不妨令$S_bw=\lambda (μ_0−μ_1)$，将其带入：$(S^{−1}_wS_b)w=λw$，可以得到$w=S^{−1}_w(μ_0−μ_1)$， 也就是说我们只要求出原始二类样本的均值和方差就可以确定最佳的投影方向$w$了。</p>
<ol>
<li>多类LDA原理</li>
</ol>
<p>　　　　有了二类LDA的基础，我们再来看看多类别LDA的原理。</p>
<p>　　　　假设我们的数据集$D={(x_1,y_1),(x_2,y_2),\cdots,((x_m,y_m))}$,其中任意样本$x_i$为n维向量，$y_i\in{C_1,C_2,\cdots,C_k}$。我们定义$N_j(j=1,2\cdots k)$为第j类样本的个数，$X_j(j=1,2\cdots k)$为第j类样本的集合，而$μ_j(j=1,2\cdots k)$为第j类样本的均值向量，定义$Σ_j(j=1,2\cdots k)$为第j类样本的协方差矩阵。在二类LDA里面定义的公式可以很容易的类推到多类LDA。</p>
<p>　　　　由于我们是多类向低维投影，则此时投影到的低维空间就不是一条直线，而是一个超平面了。假设我们投影到的低维空间的维度为d，对应的基向量为$(w_1,w_2,\cdots w_d)$，基向量组成的矩阵为$W$, 它是一个$m×d$的矩阵。</p>
<p>　　　　此时我们的优化目标应该可以变成为:<br>$$\frac{W^TS_bW}{W^TS_wW}$$<br>　　　　其中$Sb=\sum_{j=1}^kN_j(μ_j−μ)(μ_j−μ)^T$,μ为所有样本均值向量。$S_w=\sum_{j=1}^kS_{wj}=\sum_{j=1}^k\sum_{x\in{X_j}}(x−μ_j)(x−μ_j)^T$<br>　　　　但是有一个问题，就是$W^TS_bW$和$W^TS_wW$都是矩阵，不是标量，无法作为一个标量函数来优化！也就是说，我们无法直接用二类LDA的优化方法，怎么办呢？一般来说，我们可以用其他的一些替代优化目标来实现。</p>
<p>　　　　常见的一个LDA多类优化目标函数定义为：<br>$$\underbrace{arg\ max}_W\ J(W)=\frac{\prod_{diag}W^TS_bW}{\prod_{diag}W^TS_wW}$$<br>　　　　其中$\prod_{diag}A$为A的主对角线元素的乘积，$W$为$m×d$的矩阵。</p>
<p> 　　　　$J(W)$的优化过程可以转化为：<br>$$J(W)=\frac{\prod_{i=1}^dw^T_iS_bw_i}{\prod_{i=1}^dw^T_iS_ww_i}=\prod_{i=1}^d\frac{w^T_iS_bw_i}{w^T_iS_ww_i}$$<br>　　　　仔细观察上式最右边，这不就是广义瑞利商嘛！最大值是矩阵$S^{−1}_wS_b$的最大特征值,最大的d个值的乘积就是矩阵$S^{−1}_wS_b$的最大的d个特征值的乘积,此时对应的矩阵$W$为这最大的d个特征值对应的特征向量张成的矩阵。</p>
<p>　　　　由于W是一个利用了样本的类别得到的投影矩阵，因此它的降维到的维度d最大值为k-1。为什么最大维度不是类别数k呢？因为$S_b$中每个$μ_j−μ$的秩为1，因此协方差矩阵相加后最大的秩为k(矩阵的秩小于等于各个相加矩阵的秩的和)，但是由于如果我们知道前k-1个$μ_j$后，最后一个$μ_k$可以由前k-1个$μ_j$线性表示，因此$S_b$的秩最大为k-1，即特征向量最多有k-1个。</p>
<ol>
<li>LDA算法流程</li>
</ol>
<p>　　　　在第三节和第四节我们讲述了LDA的原理，现在我们对LDA降维的流程做一个总结。</p>
<p>　　　　输入：数据集$D={(x_1,y_1),(x_2,y_2),\cdots,((x_m,y_m))}$,其中任意样本$x_i$为n维向量，$y_i\in{C_1,C_2,\cdots,C_k}$，降维到的维度d。</p>
<p>　　　　输出：降维后的样本集 $D′$</p>
<p>　　　　1) 计算类内散度矩阵$S_w$</p>
<p>　　　　2) 计算类间散度矩阵$S_b$</p>
<p>　　　　3) 计算矩阵$S^{−1}_wS_b$</p>
<p>　　　　4）计算$S^{−1}_wS_b$的最大的d个特征值和对应的d个特征向量$(w_1,w_2,\cdots w_d)$,得到投影矩阵$W$</p>
<p>　　　　5) 对样本集中的每一个样本特征$x_i$,转化为新的样本$z_i=W^Tx_i$<br>　　　　6) 得到输出样本集$D′={(z_1,y_1),(z_2,y_2),\cdots,((z_m,y_m))}$</p>
<p>　　　　以上就是使用LDA进行降维的算法流程。实际上LDA除了可以用于降维以外，还可以用于分类。一个常见的LDA分类基本思想是假设各个类别的样本数据符合高斯分布，这样利用LDA进行投影后，可以利用极大似然估计计算各个类别投影数据的均值和方差，进而得到该类别高斯分布的概率密度函数。当一个新的样本到来后，我们可以将它投影，然后将投影后的样本特征分别带入各个类别的高斯分布概率密度函数，计算它属于这个类别的概率，最大的概率对应的类别即为预测类别。</p>
<p>　　　　由于LDA应用于分类现在似乎也不是那么流行，这里我就不多讲了。</p>
<ol>
<li>LDA vs PCA</li>
</ol>
<p>　　　　LDA用于降维，和PCA有很多相同，也有很多不同的地方，因此值得好好的比较一下两者的降维异同点。</p>
<p>　　　　首先我们看看相同点：</p>
<p>　　　　1）两者均可以对数据进行降维。</p>
<p>　　　　2）两者在降维时均使用了矩阵特征分解的思想。</p>
<p>　　　　3）两者都假设数据符合高斯分布。</p>
<p>　　　　我们接着看看不同点：</p>
<p>　　　　1）LDA是有监督的降维方法，而PCA是无监督的降维方法</p>
<p>　　　　2）LDA降维最多降到类别数k-1的维数，而PCA没有这个限制。</p>
<p>　　　　3）LDA除了可以用于降维，还可以用于分类。</p>
<p>　　　　4）LDA选择分类性能最好的投影方向，而PCA选择样本点投影具有最大方差的方向。</p>
<p>　　　　这点可以从下图形象的看出，在某些数据分布下LDA比PCA降维较优。
　　　　</p>
<center><br><img src="http://oq5d32gij.bkt.clouddn.com/14958087681939.jpg" alt=""><br></center>

<p>　　　　当然，某些某些数据分布下PCA比LDA降维较优，如下图所示：
　　　　</p>
<center><br><img src="http://oq5d32gij.bkt.clouddn.com/14958087756706.jpg" alt=""><br></center>

<ol>
<li>LDA算法小结</li>
</ol>
<p>　　　　LDA算法既可以用来降维，又可以用来分类，但是目前来说，主要还是用于降维。在我们进行图像识别图像识别相关的数据分析时，LDA是一个有力的工具。下面总结下LDA算法的优缺点。</p>
<p>　　　　LDA算法的主要优点有：</p>
<p>　　　　1）在降维过程中可以使用类别的先验知识经验，而像PCA这样的无监督学习则无法使用类别先验知识。</p>
<p>　　　　2）LDA在样本分类信息依赖均值而不是方差的时候，比PCA之类的算法较优。</p>
<p>　　　　LDA算法的主要缺点有：</p>
<p>　　　　1）LDA不适合对非高斯分布样本进行降维，PCA也有这个问题。</p>
<p>　　　　2）LDA降维最多降到类别数k-1的维数，如果我们降维的维度大于k-1，则不能使用LDA。当然目前有一些LDA的进化版算法可以绕过这个问题。</p>
<p>　　　　3）LDA在样本分类信息依赖方差而不是均值的时候，降维效果不好。</p>
<p>　　　　4）LDA可能过度拟合数据。</p>
]]></content>
      
        <categories>
            
            <category> machine learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LDA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS UICollectionView自定义cell]]></title>
      <url>/2017/05/19/uicell/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>自定义的UITableCell<br><a id="more"></a></p>
<pre><code class="mm">//
//  jokeCell.m
//  MyLaugh
//
//  Created by wangyu on 14/05/2017.
//  Copyright © 2017 wangyu. All rights reserved.
//

#import &quot;jokeCell.h&quot;
#define SCREEN_WIDTH [UIScreen mainScreen].bounds.size.width

@implementation jokeCell
{
    UILabel *_titleLabel;
    UILabel *_contentLabel;
    UILabel *_updatetimeLabel;
}

-(instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    _titleLabel = [[UILabel alloc]initWithFrame:CGRectMake(0,5,SCREEN_WIDTH,21)];
    _titleLabel.backgroundColor = [UIColor clearColor];
    _titleLabel.textAlignment = NSTextAlignmentCenter;
    _titleLabel.textColor = [UIColor purpleColor];
    _titleLabel.font = [UIFont italicSystemFontOfSize:17];
    _contentLabel = [[UILabel alloc]initWithFrame:CGRectMake(0, 30, SCREEN_WIDTH, 21)];
    _contentLabel.backgroundColor = [UIColor clearColor];
    _contentLabel.numberOfLines = 0;
    _updatetimeLabel = [[UILabel alloc]initWithFrame:CGRectMake(0, 30, SCREEN_WIDTH, 21)];
    _updatetimeLabel.textAlignment = NSTextAlignmentRight;
    self.selectionStyle = UITableViewCellSelectionStyleNone;
    return self;
}


- (void)layoutSubviews{
    [super layoutSubviews];
    [self.contentView addSubview:_titleLabel];
    [self.contentView addSubview:_contentLabel];
    [self.contentView addSubview:_updatetimeLabel];
}

-(void) setTitle:(NSString *)title
{
    _title = title;
    _titleLabel.text = title;
}

-(void) setContent:(NSString *)content
{
    _content = content;
    _contentLabel.text = content;
}

-(void)setUpdatetime:(NSString *)updatetime
{
    _updatetime = updatetime;
    _updatetimeLabel.text = updatetime;
}

-(void) setContentLabelHeight:(CGFloat)height
{
    _contentLabel.frame = CGRectMake(0, 30, _contentLabel.frame.size.width, height);
    _updatetimeLabel.frame = CGRectMake(0, 35+height, _updatetimeLabel.frame.size.width, 21);
}

-(CGFloat) getHeight
{
    //计算文字高度
    NSDictionary *attribute = @{NSFontAttributeName: _contentLabel.font};
    CGSize retSize = [_contentLabel.text boundingRectWithSize:CGSizeMake(SCREEN_WIDTH, MAXFLOAT) options:NSStringDrawingTruncatesLastVisibleLine|NSStringDrawingUsesLineFragmentOrigin|NSStringDrawingUsesFontLeading attributes:attribute context:nil].size;
    _contentLabel.frame = CGRectMake(0, 30, _contentLabel.frame.size.width, retSize.height);
    _updatetimeLabel.frame = CGRectMake(0, 35+_contentLabel.frame.size.height, _updatetimeLabel.frame.size.width, 21);
    return 30+_contentLabel.frame.size.height+10+21+5;
}

- (void)awakeFromNib {
    [super awakeFromNib];
    // Initialization code
}

- (void)setSelected:(BOOL)selected animated:(BOOL)animated {
    [super setSelected:selected animated:animated];

    // Configure the view for the selected state
}

@end
</code></pre>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MathJax]]></title>
      <url>/2017/05/18/math/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>对LaTex基本用法的学习<br><a id="more"></a><br>$$T = \{(\vec{x_1},y_1),((\vec{x_2},y_2),\cdots,(\vec{x_N},y_N)\},\vec{x_i} $$</p>
<h2 id="常用数学符号的-LaTeX-表示方法"><a href="#常用数学符号的-LaTeX-表示方法" class="headerlink" title="常用数学符号的 LaTeX 表示方法"></a>常用数学符号的 LaTeX 表示方法</h2><p>１、指数和下标可以用 ^ 和 _ 后加相应字符来实现。比如：</p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/foot.gif" alt="foot"></p>
<p>2、平方根（square root）的输入命令为：\sqrt，n 次方根相应地为: \sqrt[n]。方根符号的大小由LATEX自动加以调整。也可用\surd 仅给出<br>符号。比如：</p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/sqrt.gif" alt="sqrt"></p>
<p>3、命令\overline 和\underline 在表达式的上、下方画出水平线。比如：</p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/overline.gif" alt="overline"></p>
<p>4、命令\overbrace 和\underbrace 在表达式的上、下方给出一水平的大括号。</p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/brace.gif" alt="brace"></p>
<p>5、向量（Vectors）通常用上方有小箭头（arrow symbols）的变量表示。这可由\vec 得到。另两个命令\overrightarrow 和\overleftarrow在定义从A 到B 的向量时非常有用。</p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/vec.gif" alt="ve"></p>
<p>6、分数（fraction）使用\frac{…}{…} 排版。一般来说，1/2 这种形式更受欢迎，因为对于少量的分式，它看起来更好些。</p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/frac.gif" alt="fra"></p>
<p>7、积分运算符（integral operator）用\int 来生成。求和运算符（sum operator）由\sum 生成。乘积运算符（product operator）由\prod 生成。上限和下限用^ 和_来生成，类似于上标和下标。</p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/int.gif" alt="int"></p>
<p>###以下提供一些常用符号的表示方法</p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/1.gif" alt="1"></p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/2.gif" alt="2"></p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/3.gif" alt="3"></p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/4.gif" alt="4"></p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/5.gif" alt="5"></p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/6.gif" alt="6"></p>
<p><img src="http://oq5d32gij.bkt.clouddn.com/7.gif" alt="7"></p>
<p>大家都喜欢用 $E=mc^2$ 举例子，但是我不是很理解。  </p>
<p>这个公式 $\cos 2\theta = \cos^2 \theta - \sin^2 \theta =  2 \cos^2 \theta - 1$ 少年可还记得？</p>
<p>插入方程组（注意多行公式结尾\\\需要打成\\\，可能是因为markdown会自动转义第一个\\）：</p>
<p>\begin{aligned}<br>\dot{x} &amp; = \sigma(y-x) \\\<br>\dot{y} &amp; = \rho x - y - xz \\\<br>\dot{z} &amp; = -\beta z + xy<br>\end{aligned}</p>
<p>插入矩阵（同上）：</p>
<p>\begin{bmatrix}<br>1 &amp; 2\\\<br>3 &amp; 4<br>\end{bmatrix}</p>
<p>来个复杂点的（注意有的公式开头不会自动识别，用$ $包围）：</p>
<p>$$\frac{\partial u}{\partial t}= h^2\left( \frac{\partial^2u}{\partial x^2}+ \frac{\partial^2 u}{\partial y^2}+\frac{\partial^2 u}{\partial z^2}\right)$$</p>
<p>最后来个牛逼的吧，薛定谔方程，大学物理就记得这个了：</p>
<p>$$ i\hbar\frac{\partial \psi}{\partial t}= \frac{-\hbar^2}{2m} \left(\frac{\partial^2}{\partial x^2}+ \frac{\partial^2}{\partial y^2}+ \frac{\partial^2}{\partial z^2}\right) \psi + V \psi.$$</p>
<p>$$\begin{cases}\int\Omega \nabla \mathbf{F}&amp;=\int\Gamma \mathbf{F}\cdot d\mathbf{S} \<br>u&amp;=g_0,\quad \Gamma_D \<br>\partial_n u&amp;=g_1 ,\quad \Gamma_N<br>\end{cases} $$</p>
<p>$$\underbrace{a+b+\cdots+z}_{26}$$</p>
]]></content>
      
        <categories>
            
            <category> machine learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> math </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
